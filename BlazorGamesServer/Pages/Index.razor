@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Index</PageTitle>

<label>
    @currentUser?.Name (@currentUser?.Type)
</label>
<label>
    Message:
    <input @bind="messageInput" size="50" />
</label>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul>
    @foreach (var messagePair in messagePairs)
    {
        <li>@messagePair.user.Name (@messagePair.user.Type):@messagePair.message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<(User user, string message)> messagePairs = new List<(User, string)>();
    private User? currentUser;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<User, string>("ReceiveMessage", (user, message) =>
        {
            var messagePair = (user, message);
            messagePairs.Add(messagePair);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    // TODO: possibly modify this to properly handle state and load new information
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        var userState = await ProtectedSessionStore.GetAsync<User>("user");
        if (userState.Success)
        {
            currentUser = userState.Value;
            StateHasChanged();
        }
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", currentUser, messageInput);
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}