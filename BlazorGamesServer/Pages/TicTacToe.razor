@page "/tictactoe"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable
@inject TicTacToeService TicTacToeGame
@using BlazorGamesServer.GameComponents.TicTacToe

<PageTitle>Tic-Tac-Toe</PageTitle>

<h3>TicTacToe</h3>

<h4>Current Turn: @(isXMove ? 'X' : 'O')</h4> @*It is updating but as part of the client...*@

<div class="board">
    @for (int x = 0; x < board?.GetLength(0); x++)
    {
        <div class="board-row">
            @for (int y = 0; y < board?.GetLength(1); y++)
            {
                var xIndex = x; // why do I need to copy the index variables ??
                var yIndex = y; // why, blazor ???
                <Tile Move="async () => await MakeMove(xIndex, yIndex)">@board[xIndex,yIndex].Value</Tile>
            }
        </div>
    }
</div>

<button @onclick="ResetGame">Reset Game</button>

<table>
    <tr>
        <th>Name</th>
        <th>Type</th>
        <th>Id</th>
    </tr>
    @foreach (var user in lobby)
    {
        <tr>
            <td>@user.Name</td>
            <td>@user.Type</td>
            <td>@user.Id</td>
        </tr>
    }
</table>

@code {
    [CascadingParameter]
    private SessionStateProvider? sessionState { get; set; }

    private HubConnection? hubConnection;

    private BlazorGamesServer.Data.TicTacToe.Tile[,]? board; // TODO: maybe change this to array of chars
    private bool isXMove = false;

    private User? currentUser;
    private List<User> lobby = new List<User>(); // TODO: Get lobby to work with SignalR

    protected override async Task OnInitializedAsync()
    {
        if (sessionState is not null)
        {
            currentUser = sessionState.currentUser;
        }

        board = await TicTacToeGame.GetBoardAsync();
        isXMove = await TicTacToeGame.GetTurnAsync();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/tictactoehub"))
            .Build();

        hubConnection.On("BoardChange", () =>
        {
            isXMove = TicTacToeGame.IsXMove;
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task ResetGame()
    {
        await TicTacToeGame.ResetAsync();
        isXMove = await TicTacToeGame.GetTurnAsync();

        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("UpdateBoard");
        }
    }

    private async Task MakeMove(int x, int y)
    {
        await TicTacToeGame.MakeMoveAsync(x, y);
        isXMove = await TicTacToeGame.GetTurnAsync();

        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("UpdateBoard");
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
