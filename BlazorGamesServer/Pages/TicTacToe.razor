@page "/tictactoe"
@inject TicTacToeService TicTacToeGame
@using BlazorGamesServer.GameComponents.TicTacToe

@implements IDisposable

<h3>TicTacToe</h3>

<h4>Current Turn: @(isXMove ? 'X' : 'O')</h4> @*It is updating but as part of the client...*@
<h4>Turn Count: @count</h4>

<div class="board">
    @for (int x = 0; x < board.GetLength(0); x++)
    {
        <div class="board-row">
            @for (int y = 0; y < board.GetLength(1); y++)
            {
                var xIndex = x; // why do I need to copy the index variables ??
                var yIndex = y; // why, blazor ???
                <Tile Move="async () => await MakeMove(xIndex, yIndex)">@board[xIndex,yIndex].Value</Tile>
            }
        </div>
    }
</div>

<button @onclick="ResetGame">Reset Game</button>

@code {
    private BlazorGamesServer.Data.TicTacToe.Tile[,]? board; // TODO: maybe change this to array of chars
    private bool isXMove = false;
    private char turn = 'X';
    private int count = 0;

    private List<User> lobby = new List<User>();

    protected override async Task OnInitializedAsync()
    {
        board = await TicTacToeGame.GetBoardAsync();
        isXMove = await TicTacToeGame.GetTurnAsync();

        lobby = await TicTacToeGame.LobbyGetListAsync();

        //var userCheck = await ProtectedSessionStore.GetAsync<User>("user");
        //if (!userCheck.Success)
        //{
        //    await ProtectedSessionStore.SetAsync("user", new User("guest", UserType.Guest));
        //}
    }

    // This should control what happens when the page is closed or left
    public void Dispose()
    {

    }

    private async Task ResetGame()
    {
        await TicTacToeGame.ResetAsync();
        isXMove = await TicTacToeGame.GetTurnAsync();
    }

    private async Task GetTurn()
    {
        isXMove = await TicTacToeGame.GetTurnAsync();
    }

    private async Task MakeMove(int x, int y)
    {
        //Console.WriteLine(isXMove ? 'X' : 'O');
        //isXMove = !isXMove;
        //await GetTurn();

        await TicTacToeGame.MakeMoveAsync(x, y);

        isXMove = !isXMove;
        count++;
        StateHasChanged();
    }
}
