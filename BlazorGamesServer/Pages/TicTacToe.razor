@page "/tictactoe"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable
@inject TicTacToeService TicTacToeGame
@using BlazorGamesServer.GameComponents.TicTacToe

<PageTitle>Tic-Tac-Toe</PageTitle>

<h3>TicTacToe</h3>

<h4>Current Turn: @(isXMove ? 'X' : 'O')</h4> @*It is updating but as part of the client...*@

<div class="board">
    @for (int x = 0; x < board?.GetLength(0); x++)
    {
        <div class="board-row">
            @for (int y = 0; y < board?.GetLength(1); y++)
            {
                var xIndex = x; // why do I need to copy the index variables ??
                var yIndex = y; // why, blazor ???
                <Tile Move="async () => await MakeMove(xIndex, yIndex)">@board[xIndex,yIndex].Value</Tile>
            }
        </div>
    }
</div>

<button @onclick="ResetGame">Reset Game</button>

<div id="social">
    <Lobby LobbyList="@TicTacToeGame.Lobby" RoomName="tictactoe"/>
    <Chat RoomName="tictactoe" />
</div>

@code {
    [CascadingParameter]
    private SessionStateProvider? sessionState { get; set; }

    private HubConnection? ticTacToeHubConnection;
    private HubConnection? lobbyHubConnection;

    private BlazorGamesServer.Data.TicTacToe.Tile[,]? board; // TODO: maybe change this to array of chars
    private bool isXMove = false;

    private User? currentUser;
    private List<User> lobby = new List<User>(); // TODO: Get lobby to work with SignalR

    protected override async Task OnInitializedAsync()
    {
        // Loading page variables on initialize
        if (sessionState is not null)
        {
            currentUser = sessionState.currentUser;
        }

        board = await TicTacToeGame.GetBoardAsync();
        isXMove = await TicTacToeGame.GetTurnAsync();

        // handling and defining TicTacToe game hub connection
        ticTacToeHubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/tictactoehub"))
            .Build();

        ticTacToeHubConnection.On("BoardChange", () =>
        {
            isXMove = TicTacToeGame.IsXMove;
            InvokeAsync(StateHasChanged);
        });

        await ticTacToeHubConnection.StartAsync();

        // handling lobby hub connection
        lobbyHubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/lobbyhub"))
            .Build();

        lobbyHubConnection.On("LobbyChange", () =>
        {
            InvokeAsync(StateHasChanged);
        });

        await lobbyHubConnection.StartAsync();

        if (currentUser is not null)
        {
            await TicTacToeGame.LobbyAddUserAsync(currentUser);

            if (lobbyHubConnection is not null)
            {
                await lobbyHubConnection.SendAsync("UpdateLobby");
            }
        }
    }

    private async Task ResetGame()
    {
        await TicTacToeGame.ResetAsync();
        isXMove = await TicTacToeGame.GetTurnAsync();

        if (ticTacToeHubConnection is not null)
        {
            await ticTacToeHubConnection.SendAsync("UpdateBoard");
        }
    }

    private async Task MakeMove(int x, int y)
    {
        await TicTacToeGame.MakeMoveAsync(x, y);
        isXMove = await TicTacToeGame.GetTurnAsync();

        if (ticTacToeHubConnection is not null)
        {
            await ticTacToeHubConnection.SendAsync("UpdateBoard");
        }
    }

    public bool IsConnected => ticTacToeHubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (lobbyHubConnection is not null && currentUser is not null)
        {
            await TicTacToeGame.LobbyRemoveUserAsync(currentUser.Id);
            await lobbyHubConnection.SendAsync("UpdateLobby");
        }

        if (ticTacToeHubConnection is not null)
        {
            await ticTacToeHubConnection.DisposeAsync();
        }

        if (lobbyHubConnection is not null)
        {
            await lobbyHubConnection.DisposeAsync();
        }
    }
}
