@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable
@using BlazorGamesServer.Data.Social

<h3>Chat</h3>

<form @onsubmit="Send" @onsubmit:preventDefault="true">
    <label>
        Message:
        <input @bind="messageInput" size="50" required />
    </label>
    <button type="submit" disabled="@(!IsConnected)">Send</button>
</form>

<ul>
    @foreach (var message in messages)
    {
        <li>@message.ToString()</li>
    }
</ul>

@code {
    [CascadingParameter]
    private SessionStateProvider? sessionState { get; set; }

    [Parameter]
    public string? RoomName { get; set; }
    private string? roomName { get; set; }

    private HubConnection? chatHubConnection;

    private User? currentUser;
    private List<Message> messages = new List<Message>();

    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        if (sessionState is not null)
        {
            currentUser = sessionState.currentUser;
            //Console.WriteLine(currentUser?.Id);
        }

        chatHubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        chatHubConnection.On<Message>("ReceiveMessage", (message) =>
        {
            messages.Add(new Message(message.Sender, message.Content));
            InvokeAsync(StateHasChanged);
        });

        chatHubConnection.On<User>("UserJoined", (user) =>
        {
            messages.Add(new Message(user, "joined the chat."));
            InvokeAsync(StateHasChanged);
        });

        chatHubConnection.On<User>("UserLeft", (user) =>
        {
            messages.Add(new Message(user, "left the chat."));
            InvokeAsync(StateHasChanged);
        });

        await chatHubConnection.StartAsync();

        roomName = RoomName ?? "default";
        //if (currentUser is not null)
        //{
        //     TODO: maybe try not tying JoinRoom to the chat component...
        //    await chatHubConnection.SendAsync("JoinRoom", currentUser, RoomName);
        //}
    }

    private async Task Send()
    {
        if (chatHubConnection is not null && currentUser is not null && messageInput is not null)
        {
            await chatHubConnection.SendAsync("SendMessage", new Message(currentUser, messageInput), roomName);
        }
    }

    public bool IsConnected => chatHubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (chatHubConnection is not null)
        {
            await chatHubConnection.SendAsync("LeaveRoom", currentUser, roomName);
            await chatHubConnection.DisposeAsync();
        }
    }
}
